import logging
from collections.abc import Generator

import pytest
from _pytest.fixtures import SubRequest
from starlette import status
from starlette.testclient import TestClient

from api.api_v1.video_catalog.crud import storage
from main import app
from schemas.video_catalog import Movie, MovieUpdate
from testing.conftest import movie_create_random_slug

logger = logging.getLogger(__name__)


class TestUpdate:

    @pytest.fixture()
    def movie(self, request: SubRequest) -> Generator[Movie]:
        title_film, description_film = request.param
        logger.info("üõ†Ô∏è  –°–û–ó–î–ê–ù–ò–ï –§–ò–õ–¨–ú–ê –í –§–ò–ö–°–¢–£–†–ï")
        logger.info("   –ò—Å—Ö–æ–¥–Ω—ã–π title: '%s'", title_film)
        logger.info("   –ò—Å—Ö–æ–¥–Ω—ã–π description: '%s'", description_film)

        movie = movie_create_random_slug(
            title_film=title_film,
            description_film=description_film,
        )

        logger.info("   –§–∏–ª—å–º —Å–æ–∑–¥–∞–Ω: Slug=%s", movie.slug)
        logger.info(
            "   Genre: '%s', Year: %s, Time: %s –º–∏–Ω",
            movie.genre,
            movie.production_year,
            movie.time_film,
        )

        yield movie

        logger.info("üßπ –£–î–ê–õ–ï–ù–ò–ï –§–ò–õ–¨–ú–ê: %s", movie.slug)
        storage.delete(movie)

    @pytest.mark.parametrize(
        "movie, new_title, new_description",
        [
            pytest.param(
                ("some title", "some description"),
                "update title",
                "some description",
                id="some-description-and-new-title",
            ),
        ],
        indirect=["movie"],
    )
    def test_update_movie_details(
        self,
        movie: Movie,
        new_title: str,
        new_description: str,
        auth_client: TestClient,
    ) -> None:
        logger.info("üé¨ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞")
        logger.info("=" * 60)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üìã –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –§–ò–õ–¨–ú–ê:")
        logger.info("   ‚Ä¢ Title: '%s'", movie.title_film)
        logger.info("   ‚Ä¢ Description: '%s'", movie.description_film)
        logger.info("   ‚Ä¢ Genre: '%s'", movie.genre)
        logger.info("   ‚Ä¢ Production Year: %s", movie.production_year)
        logger.info("   ‚Ä¢ Time: %s –º–∏–Ω", movie.time_film)
        logger.info("   ‚Ä¢ Slug: %s", movie.slug)

        film = app.url_path_for(
            "update_movie_details",
            slug=movie.slug,
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.info("üîÑ –î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        logger.info("   ‚Ä¢ –ù–æ–≤—ã–π Title: '%s'", new_title)
        logger.info("   ‚Ä¢ –ù–æ–≤—ã–π Description: '%s'", new_description)
        logger.info("   ‚Ä¢ Genre (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): '%s'", movie.genre)
        logger.info("   ‚Ä¢ Production Year (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): %s", movie.production_year)
        logger.info("   ‚Ä¢ Time (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): %s –º–∏–Ω", movie.time_film)

        update = MovieUpdate(
            title_film=new_title,
            description_film=new_description,
            genre=movie.genre,
            production_year=movie.production_year,
            time_film=movie.time_film,
        )

        logger.info("üåê –û–¢–ü–†–ê–í–ö–ê PUT-–ó–ê–ü–†–û–°–ê...")
        response = auth_client.put(
            film,
            json=update.model_dump(mode="json"),
        )

        logger.info("üì° –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢: %s", response.status_code)
        assert response.status_code == status.HTTP_200_OK, response.text

        logger.info("‚úÖ –ó–ê–ü–†–û–° –£–°–ü–ï–®–ï–ù, –ü–†–û–í–ï–†–Ø–ï–ú –î–ê–ù–ù–´–ï –í –ë–ê–ó–ï...")
        movie_db = storage.get_by_slug(movie.slug)
        assert movie_db

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        logger.info(
            "   ‚Ä¢ Title: '%s' (–±—ã–ª–æ: '%s')",
            movie_db.title_film,
            movie.title_film,
        )
        logger.info(
            "   ‚Ä¢ Description: '%s' (–±—ã–ª–æ: '%s')",
            movie_db.description_film,
            movie.description_film,
        )
        logger.info("   ‚Ä¢ Genre: '%s' (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)", movie_db.genre)
        logger.info(
            "   ‚Ä¢ Production Year: %s (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)",
            movie_db.production_year,
        )
        logger.info("   ‚Ä¢ Time: %s –º–∏–Ω (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)", movie_db.time_film)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        new_data = MovieUpdate(**movie_db.model_dump())

        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –†–ê–í–ï–ù–°–¢–í–ê –ú–û–î–ï–õ–ï–ô...")
        assert new_data == update
        logger.info("‚úÖ –ú–û–î–ï–õ–ò –°–û–í–ü–ê–î–ê–Æ–¢")

        logger.info("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        logger.info("=" * 60)
