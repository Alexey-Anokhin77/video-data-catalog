[project]
name = "video-data-catalog"
version = "0.1.0"
description = "Video data catalog"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi[standard]>=0.115.12",
    "mypy>=1.17.1",
    "redis[hiredis]>=6.2.0",
    "typer>=0.15.2",
    "types-redis>=4.6.0.20241004",
]

[dependency-groups]
dev = [
    "coverage>=7.10.6",
    "httpx>=0.28.1",
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "pytest-cov>=7.0.0",
    "ruff>=0.11.5",
]


# uv settings

[tool.uv]
required-version = "~=0.9.5"


#pytest settings

[tool.pytest.ini_options]
minversion = "8.3"
addopts = "-ra --strict-markers"
log_cli = false
log_cli_level = "INFO"
console_output_style = "progress"
markers = [
    "apitest: test any http api call",
]
xfail_strict=true



# mypy settings

[tool.mypy]
strict = true
plugins = ['pydantic.mypy',
]


# ruff settings

[tool.ruff]
required-version = ">=0.11.5"

src = [
    "v-data-catalog",
]




# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
select = [
    "ANN", # flake8-annotations (ANN)
    "FAST", # FastAPI (FAST)
    "I", # isort (I)
    "F", # Pyflakes (F)
    "COM", # flake8-commas (COM)
    "Q", # flake8-quotes (Q)
    # "ASYNC", # flake8-async (ASYNC)
    "S", # flake8-bandit (S)
    "BLE", # flake8-blind-except (BLE)
    "FBT",  # flake8-boolean-trap (FBT)
    "B",  # flake8-bugbear (B)
    "C4", # flake8-comprehensions (C4),
    "DTZ", # flake8-datetimez (DTZ)
    "T10", # flake8-debugger (T10)
    "EM", # flake8-errmsg (EM)
    "ISC", # flake8-implicit-str-concat (ISC)
    "ICN", # flake8-import-conventions (ICN)
    "LOG", # flake8-logging (LOG)
    "G", # flake8-logging-format (G)
    "INP", # flake8-no-pep420 (INP)
    "PIE", # flake8-pie (PIE)
    "T20", # flake8-print (T20)
    "PYI", # flake8-pyi (PYI)
    # "PT", # flake8-pytest-style (PT)
    "Q", # flake8-quotes (Q)
    "RSE", # flake8-raise (RSE)
    "RET", # flake8-return (RET)
    "SLF", # flake8-self (SLF)
    "SIM", # flake8-simplify (SIM)
    "SLOT", # flake8-slots (SLOT)
    "TC", # flake8-type-checking (TC)
    "ARG", # flake8-unused-arguments (ARG)
    "PTH", # flake8-use-pathlib (PTH)
    "FLY", # flynt (FLY)
    "C90", # mccabe (C90)
    "N", # pep8-naming (N)
    "PERF", # Perflint (PERF)
    "E", # pycodestyle (E)
    "W", # pycodestyle (W)
    # "DOC", # pydoclint (DOC)
    # "D", # pydocstyle (D)
    "PGH", # pygrep-hooks (PGH)
    "PLC", # Convention (PLC)
    "PLE", # Error (PLE)
    "PLR", # Refactor (PLR)
    "PLW", # Warning (PLW)
    "UP", # pyupgrade (UP)
    "FURB", # refurb (FURB)
    "RUF", # Ruff-specific rules (RUF)
    "TRY", # tryceratops (TRY)
]

ignore = [
    "S101", # S101	assert	Use of assert detected
    "RUF001", # ambiguous-unicode-character-string
    "RUF002", # ambiguous-unicode-character-docstring
    "RUF003", # ambiguous-unicode-character-comment
    "TC006", # runtime-cast-value
]

[tool.ruff.lint.extend-per-file-ignores]
"stuff.py" = [
    "T20", # flake8-print (T20)
]
"v-data-catalog/testing/**/*.py" = ["S311"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
